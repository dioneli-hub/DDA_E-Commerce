@using DDA.ApiModels;
@using DDA.BusinessLogic.Services.CartService;
@using DDA.BusinessLogic.Services.UserService;
@using System.Security.Cryptography

@page "/Cart"

@if(CartItems is null && ErrorMessage is null)
{
    <Loading></Loading>
}
else if(ErrorMessage is not null)
{
    <DisplayErrorMessage ErrorMessage ="@ErrorMessage"></DisplayErrorMessage>
}
else
{
    <h3 class="mb-5">Shopping Cart</h3>
    @if(CartItems.Count() > 0)
    {
    <div class="row-mb-5">
        <div class="col-md-9">
            @foreach(var cartItem in CartItems)
            {
                <div class="row mb-4">
                    <div class="col-md-4">
                        <img src="@cartItem.ItemImage" width="300" class="img-thumbnail">
                    </div>
                    <div class="col-md-8">
                        <h5>@cartItem.ItemName</h5>
                        <div class="mb-4">@cartItem.ItemDescription</div>
                        <span>Price: <b>@cartItem.Price.ToString("C")</b></span>
                        <div>
                            <button @onclick="(() => RemoveCartItem_Click(cartItem.Id))" class="btn btn-danger sm">
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="col-md-3">
            <h5>Summary</h5>
            <div class="mt-2">
                <a href="#" class="btn btn-success">
                    <span class="oi oi-credit-card"></span>&nbsp; Proceed to checkout
                </a>
            </div>
        </div>
    </div>
}
else
{
    <h4>There are currently no items in your shopping cart.</h4>
}
}

@code {
    [Inject]
    public ICartService CartService {get; set;}
    [Inject]
    public IUserService UserService { get; set; }

    public List<CartItemModel> CartItems { get; set; }

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CartItems = await CartService.GetUsersCartItems(UserService.GetCurrentUserId());
        }
        catch (Exception e)
        {
            
            ErrorMessage = e.Message;
        }
    }

    protected async Task RemoveCartItem_Click(int id)
    {
        var cartItemModel = await CartService.RemoveCartItem(id);
        RemoveCartItem(id);
    }

    private CartItemModel GetCartItem(int id)
    {
        return CartItems.FirstOrDefault(i => i.Id == id);
    }

    private void RemoveCartItem(int id)
    {
        var cartItemModel = GetCartItem(id);
        CartItems.Remove(cartItemModel);
    }

}
