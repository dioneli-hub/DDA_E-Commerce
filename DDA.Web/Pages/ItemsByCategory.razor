@using DDA.ApiModels;
@using DDA.BusinessLogic.Services.ItemsLocalStorageService
@page "/ItemsByCategory/{CategoryId:int}"

@if(Items == null && ErrorMessage == null){
    <Loading></Loading>
} 
else if(ErrorMessage != null) {
    <DisplayErrorMessage ErrorMessage="ErrorMessage"/>
}
else {
    <h3>(@CategoryName)</h3>
@if (Items.Count() > 0)
{
    <DisplayItems Items="@Items"></DisplayItems>
}
}

@code {
    [Parameter]
    public int CategoryId { get; set; }

    [Inject]
    public IItemService ItemService { get; set; }
    [Inject]
    public IItemsLocalStorageService ItemsLocalStorageService { get; set; }

    public IEnumerable<ItemModel> Items { get; set; }

    public string CategoryName { get; set; }

    public string ErrorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Items = await GetItemsCollectionByCategoryId(CategoryId);

            if (Items != null && Items.Count() > 0)
            {
                var itemModel = Items.FirstOrDefault(i => i.CategoryId == CategoryId);
                if (itemModel != null)
                {
                    CategoryName = itemModel.CategoryName;
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task<IEnumerable<ItemModel>> GetItemsCollectionByCategoryId(int categoryId)
    {
        var itemsCollection = await ItemsLocalStorageService.GetCollection();
        if (itemsCollection != null)
        {
            return itemsCollection
                .Where(i => i.CategoryId == categoryId);
        }
        else
        {
            return await ItemService.GetItemsByCategory(categoryId);
        }
    }
}
